{"version":3,"sources":["config.js","NotefulContext.js","Header.js","Footer.js","FolderList.js","FolderItem.js","NoteItem.js","NoteList.js","App.js","Note.js","index.js"],"names":["API_FOLDERS","API_NOTES","NotefulContext","React","createContext","notes","folders","deleteNote","addNote","addFolder","addErrorNotes","addErrorFolders","unfinishedMessage","Header","props","to","Footer","href","target","rel","FolderList","useContext","Consumer","context","className","onClick","map","folder","key","id","match","params","folderId","role","aria-label","name","FolderItem","activeNote","find","note","noteId","activeFolder","filter","history","goBack","NoteItem","handleClickDelete","e","preventDefault","console","log","location","pathname","includes","fetch","config","method","headers","then","res","ok","json","error","data","push","catch","this","contextType","modified","split","Component","NoteList","foldernotes","length","routes","path","exact","header","aside","section","content","App","useState","setFolders","setNotes","setErrorFolders","setErrorNotes","useEffect","Error","status","contextObj","newNotes","alert","Provider","value","A","component","S","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.e62b674f.chunk.js","sourcesContent":["// hosted on github\n// https://my-json-server.typicode.com/asktami/react-router-context-noteful\n\nexport default {\n\tAPI_FOLDERS: `https://my-json-server.typicode.com/asktami/react-router-context-noteful/folders`,\n\tAPI_NOTES: `https://my-json-server.typicode.com/asktami/react-router-context-noteful/notes`\n};\n\n// hosted locally:\n// export default {\n// \tAPI_FOLDERS: `http://localhost:9090/folders`,\n// \tAPI_NOTES: `http://localhost:9090/notes`\n// };\n\n// see documentation at\n// http://localhost:9090\n\n// see data at\n// http://localhost:9090/db\n","import React from 'react';\n\nconst NotefulContext = React.createContext({\n\tnotes: [],\n\tfolders: [],\n\tdeleteNote: () => {},\n\taddNote: () => {},\n\taddFolder: () => {},\n\taddErrorNotes: () => {},\n\taddErrorFolders: () => {},\n\tunfinishedMessage: () => {}\n});\n\nexport default NotefulContext;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Header = props => {\n\treturn (\n\t\t<header>\n\t\t\t<span>\n\t\t\t\t<h1>\n\t\t\t\t\t<Link to=\"/\">Noteful</Link>\n\t\t\t\t</h1>\n\t\t\t</span>\n\t\t\t<span>a React app</span>\n\t\t</header>\n\t);\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Footer = props => {\n\treturn (\n\t\t<footer>\n\t\t\t&copy; 2019{' '}\n\t\t\t<a\n\t\t\t\thref=\"http://www.asktami.com\"\n\t\t\t\ttarget=\"_blank\"\n\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t>\n\t\t\t\tTami Williams\n\t\t\t</a>\n\t\t</footer>\n\t);\n};\n\nexport default Footer;\n","import React, { useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport NotefulContext from './NotefulContext';\n\nconst FolderList = props => {\n\t// need to grab NotefulContext (globals)\n\tconst contextType = useContext(NotefulContext);\n\tconst { folders } = contextType;\n\n\treturn (\n\t\t<NotefulContext.Consumer>\n\t\t\t{context => (\n\t\t\t\t<>\n\t\t\t\t\t<div className=\"header-container\">\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<h2>Folders</h2>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t&nbsp;&nbsp;\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<button className=\"btn-add\" onClick={context.unfinishedMessage}>\n\t\t\t\t\t\t\t\t+\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{folders.map(folder => (\n\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\tkey={folder.id}\n\t\t\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t\t\tfolder.id === props.match.params.folderId ? ' active' : null\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<NavLink to={`/folder/${folder.id}`}>\n\t\t\t\t\t\t\t\t\t<span role=\"img\" aria-label=\"Folder\">\n\t\t\t\t\t\t\t\t\t\t&#x1F4C2;\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t&nbsp;{folder.name}\n\t\t\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</ul>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</NotefulContext.Consumer>\n\t);\n};\n\nexport default FolderList;\n","import React, { useContext } from 'react';\n\nimport NotefulContext from './NotefulContext';\n\nconst FolderItem = props => {\n\tconst context = useContext(NotefulContext);\n\tconst { folders, notes } = context;\n\n\t// use the selected noteId to\n\t// - use the notes object & get the folderId\n\t// - from the folders object, use the folderId to get the note's parent folder\n\n\tconst activeNote = notes\n\t\t? notes.find(note => note.id === props.match.params.noteId)\n\t\t: '';\n\n\tif (!activeNote) return 'Sorry, no note found.';\n\n\tconst folderId = activeNote.folderId;\n\tconst activeFolder = folders.filter(folder => folder.id === folderId);\n\n\treturn (\n\t\t<>\n\t\t\t{!activeFolder\n\t\t\t\t? null\n\t\t\t\t: activeFolder.map(folder => (\n\t\t\t\t\t\t<div className=\"header-container\" key={folder.id}>\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t<h2>{folder.name}</h2>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t  ))}\n\n\t\t\t<br />\n\t\t\t<button className=\"btn-save\" onClick={props.history.goBack}>\n\t\t\t\tGo Back\n\t\t\t</button>\n\t\t</>\n\t);\n};\n\nexport default FolderItem;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport config from './config';\nimport NotefulContext from './NotefulContext';\n\n// this function 1st deletes via the API, then from state\n// context.deleteNote = the update function, to update state in context\n// Using a CLASS instead of a functional component I do *** NOT *** have to\n//  pass in PROPS to get history, location and match (AND props.note.id) AND pass in CONTEXT for deleteNote function because there is no other way for the handleClickDelete function\n// - to know what is in Context\n// - to know history, location and match\n\nexport default class NoteItem extends React.Component {\n\t// need to grab NotefulContext (globals)\n\tstatic contextType = NotefulContext;\n\n\thandleClickDelete = e => {\n\t\te.preventDefault();\n\n\t\tconsole.log('handleClickDelete props = ', this.props);\n\t\tconsole.log('handleClickDelete contextType = ', this.context);\n\n\t\tconsole.log(\n\t\t\t'handleClickDelete props.location.pathname.includes(/note/)',\n\t\t\tthis.props.location.pathname.includes('/note/')\n\t\t);\n\n\t\tconst noteId = this.props.note.id;\n\n\t\tfetch(config.API_NOTES + `/${noteId}`, {\n\t\t\tmethod: 'DELETE',\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/json'\n\t\t\t}\n\t\t})\n\t\t\t.then(res => {\n\t\t\t\tif (!res.ok) {\n\t\t\t\t\t// get the error message from the response,\n\t\t\t\t\treturn res.json().then(error => {\n\t\t\t\t\t\t// then throw it\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn res.json();\n\t\t\t})\n\t\t\t.then(data => {\n\t\t\t\t// call the callback function when the request is successful\n\t\t\t\t// this is where the App component can remove it from state\n\t\t\t\t// ie. update the notes stored in state\n\t\t\t\t// which also updates the notes stored in context\n\t\t\t\tthis.context.deleteNote(noteId);\n\n\t\t\t\t// if in Note detail, return to show all notes list\n\t\t\t\tif (this.props.location.pathname.includes('/note/')) {\n\t\t\t\t\tthis.props.history.push(`/`);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tthis.context.addErrorNotes(error);\n\t\t\t});\n\t};\n\n\trender() {\n\t\tconsole.log('inside NoteItem props = ', this.props);\n\t\tconsole.log('inside NoteItem contextType = ', this.contextType);\n\n\t\treturn (\n\t\t\t<NotefulContext.Consumer>\n\t\t\t\t{/*\n\t\t\tUse the Consumer to grab values from contex\n\t\t\t--- the value we're grabbing from context is the deleteNote function, we're passing it to the delete button\n\n \t\t\tQUESTION: what is context?\n\t\t\tANSWER:\n\t\t\tis it equal to the object inside NotefulCcontext.js?\n\t\t\tan anonymous function with the parameter context automatically defined by {context => ... }, don't know where the parameter function comes from, don't need to know where it comes from because we're using it to render a result; context is a variable containing data; this function is called by line 39 NotefulContext.Consumer\n\n\t\t\tNOTE: context could be any word since its just the parameter label\n\t\t\t*/}\n\n\t\t\t\t{context => (\n\t\t\t\t\t<div className=\"note-item\">\n\t\t\t\t\t\t{/*\n\t\t\tTHIS CAUSED A staticContent ERROR:\n\t\t\t<NavLink to={`/note/${note.id}`} {...props}>\n\t\t\t\t<h3>{note.title}</h3>\n\t\t\t</NavLink> */}\n\n\t\t\t\t\t\t<NavLink\n\t\t\t\t\t\t\tto={{\n\t\t\t\t\t\t\t\tpathname: `/note/${this.props.note.id}`,\n\t\t\t\t\t\t\t\tprops: this.props\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<h3>{this.props.note.name}</h3>\n\t\t\t\t\t\t</NavLink>\n\n\t\t\t\t\t\t<div className=\"button-container\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\tModified on{' '}\n\t\t\t\t\t\t\t\t<span className=\"note-datemod\">\n\t\t\t\t\t\t\t\t\t{this.props.note.modified\n\t\t\t\t\t\t\t\t\t\t? this.props.note.modified.split('T', 1)[0]\n\t\t\t\t\t\t\t\t\t\t: ''}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t<button className=\"btn-delete\" onClick={this.handleClickDelete}>\n\t\t\t\t\t\t\t\t\t-\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</NotefulContext.Consumer>\n\t\t);\n\t}\n}\n","import React, { useContext } from 'react';\n\nimport NotefulContext from './NotefulContext';\n\nimport NoteItem from './NoteItem';\n\nconst NoteList = props => {\n\tconsole.log('NoteList props = ', props);\n\tconsole.log('NoteList props history = ', props.history);\n\n\t// need to grab NotefulContext (globals)\n\tconst contextType = useContext(NotefulContext);\n\tconst { notes } = contextType;\n\n\t// if selected a folder, show only the notes in that folder\n\t// otherwise show all notes from all folders\n\tconst foldernotes = props.match.params.folderId\n\t\t? notes.filter(note => note.folderId === props.match.params.folderId)\n\t\t: notes;\n\n\treturn (\n\t\t<NotefulContext.Consumer>\n\t\t\t{context => (\n\t\t\t\t<>\n\t\t\t\t\t<div className=\"header-container\">\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<h2>Notes</h2>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t&nbsp;&nbsp;\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<button className=\"btn-add\" onClick={context.unfinishedMessage}>\n\t\t\t\t\t\t\t\t+\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t{foldernotes.length > 0 ? (\n\t\t\t\t\t\tfoldernotes.map(note => (\n\t\t\t\t\t\t\t<article key={note.id}>\n\t\t\t\t\t\t\t\t<div className=\"note\">\n\t\t\t\t\t\t\t\t\t{/*\n\t\t\t\t\t\t\t{...note}\n\t\t\t\t\t\t\tuse spread here IF want whole note object, and get inside NoteItem via note.key\n\t\t\t\t\t\t\talternative is\n\t\t\t\t\t\t\tnote={note} and in NoteItem get via props.note.key\n\n\t\t\t\t\t\t\tQUESTION:\n\t\t\t\t\t\t\twhy MUST pass {...props} to have the history, location, and match props inside NoteItem\n\t\t\t\t\t\t\t*/}\n\t\t\t\t\t\t\t\t\t<NoteItem note={note} {...props} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</article>\n\t\t\t\t\t\t))\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<article className=\"no-border\">\n\t\t\t\t\t\t\t<div className=\"note\">No notes in this folder.</div>\n\t\t\t\t\t\t</article>\n\t\t\t\t\t)}\n\t\t\t\t</>\n\t\t\t)}\n\t\t</NotefulContext.Consumer>\n\t);\n};\n\nexport default NoteList;\n","import React, { useState, useEffect } from 'react';\n\nimport { Route } from 'react-router-dom';\nimport './App.css';\n\nimport config from './config';\n\n// when using dummyStore text datafile:\n// import dummyStore from './dummy-store';\n\n// using React.Context:\nimport NotefulContext from './NotefulContext';\n\nimport Header from './Header';\nimport Footer from './Footer';\n\nimport FolderList from './FolderList';\nimport FolderItem from './FolderItem';\nimport NoteList from './NoteList';\nimport Note from './Note';\n\nconst routes = [\n\t{\n\t\tpath: '/',\n\t\texact: true,\n\t\theader: Header,\n\t\taside: FolderList,\n\t\tsection: NoteList\n\t},\n\t{\n\t\tpath: '/folder/:folderId',\n\t\texact: true,\n\t\theader: Header,\n\t\taside: FolderList,\n\t\tsection: NoteList\n\t},\n\t{\n\t\tpath: '/note/:noteId',\n\t\texact: true,\n\t\theader: Header,\n\t\taside: FolderItem,\n\t\tsection: Note\n\t},\n\t{\n\t\tpath: '/:any/:any/:any',\n\t\texact: true,\n\t\theader: Header,\n\t\taside: () => null,\n\t\tsection: () => 'Do not edit the  url!'\n\t}\n];\n\nconst App = props => {\n\t// // set default state variable values\n\t// setting default state with hooks\n\tconst [folders, setFolders] = useState([]);\n\tconst [notes, setNotes] = useState([]);\n\tconst [errorFolders, setErrorFolders] = useState(null);\n\tconst [errorNotes, setErrorNotes] = useState(null);\n\n\tconst unfinishedMessage = () => {\n\t\talert('Feature not doen yet!');\n\t};\n\n\t// deleteNotes updates state\n\t// and inside render context is updated with values from state\n\t// then context is used to display values in FolderList and NoteList\n\t/*\n    After making successful a DELETE API request, you can use a this.state.notes.filter method along with setState to remove a note from state and update context.\n    */\n\tconst deleteNote = noteId => {\n\t\tconst newNotes = notes.filter(note => note.id !== noteId);\n\t\tsetNotes(newNotes);\n\t};\n\n\tconst addErrorNotes = error => {\n\t\tsetErrorNotes(error);\n\t};\n\n\tconst addErrorFolders = error => {\n\t\tsetErrorFolders(error);\n\t};\n\n\tconst addNote = note => {\n\t\tsetNotes([...notes, note]);\n\t};\n\n\tconst addFolder = folder => {\n\t\tsetFolders([...folders, folder]);\n\t};\n\n\t/*\n    // NOTE NOTE NOTE\n    // Pattern: every route is responsible for loading the data it needs from scratch\n\n    // So the component rendering the /detail/:id route needs to fetch data for itself, including the correct id to use from the url, via the props React Router provides.\n    */\n\n\tconst getFolders = () => {\n\t\tfetch(config.API_FOLDERS, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/json'\n\t\t\t}\n\t\t})\n\t\t\t.then(res => {\n\t\t\t\tif (!res.ok) {\n\t\t\t\t\tthrow new Error(res.status);\n\t\t\t\t}\n\t\t\t\treturn res.json();\n\t\t\t})\n\t\t\t.then(setFolders)\n\t\t\t// passes res to setFolders function\n\t\t\t// shortcut which equals .then(res => this.setFolders(res))\n\t\t\t.catch(error => setErrorFolders(error));\n\t};\n\n\tconst getNotes = () => {\n\t\tfetch(config.API_NOTES, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/json'\n\t\t\t}\n\t\t})\n\t\t\t.then(res => {\n\t\t\t\tif (!res.ok) {\n\t\t\t\t\tthrow new Error(res.status);\n\t\t\t\t}\n\t\t\t\treturn res.json();\n\t\t\t})\n\t\t\t.then(setNotes)\n\t\t\t// passes res to setNotes function\n\t\t\t// shortcut which equals .then(res => this.setNotes(res))\n\t\t\t.catch(error => setErrorNotes(error));\n\t};\n\n\t// get Folders & Notes when componentDidMount() {}\n\t// componentDidMount() {\n\t// \tthis.getFolders();\n\t// \tthis.getNotes();\n\t// }\n\n\t// only load ONCE, to fetch initial API data\n\tuseEffect(() => {\n\t\tgetFolders();\n\t\tgetNotes();\n\t}, []); /* <-- add this */\n\n\t// create object to update the values stored in NotefulContext\n\tconst contextObj = {\n\t\tnotes: notes,\n\t\tfolders: folders,\n\t\tdeleteNote: deleteNote,\n\t\taddNote: addNote,\n\t\taddFolder: addFolder,\n\t\taddErrorNotes: addErrorNotes,\n\t\taddErrorFolders: addErrorFolders,\n\t\tunfinishedMessage: unfinishedMessage\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Header />\n\t\t\t{/* actually update the values stored in NotefulContext by passing contextObj into value\n\n                Use the Provider to make values available to all children/grandchildren/subcomponents\n\n                See: https://reactjs.org/docs/context.html#caveats\n\n                -- the code below will re-render all consumers every time the Provider re-renders because a new object is always created for value\n                */}\n\t\t\t<NotefulContext.Provider value={contextObj}>\n\t\t\t\t<main>\n\t\t\t\t\t<aside>\n\t\t\t\t\t\t{routes.map(({ path, exact, aside: A }) => (\n\t\t\t\t\t\t\t<Route key={path} path={path} exact={exact} component={A} />\n\t\t\t\t\t\t))}\n\t\t\t\t\t</aside>\n\n\t\t\t\t\t<section>\n\t\t\t\t\t\t{/* NOTE:\n                         CAN use render props to pass unfinishedMessage prop via route\n                         AND\n                         to pass location, match and history props to the component so that in the component I have access to the history object to push a new location into\n\n                                    render={props => (\n                                        <S\n                                        {...props}\n                                        unfinishedMessage={unfinishedMessage} />\n                                    )}\n\n                        can also pass unfinishedMessage via Context and do:\n                        component={S}\n                        */}\n\t\t\t\t\t\t{routes.map(({ path, exact, section: S }) => (\n\t\t\t\t\t\t\t<Route key={path} path={path} exact={exact} component={S} />\n\t\t\t\t\t\t))}\n\t\t\t\t\t</section>\n\t\t\t\t</main>\n\t\t\t</NotefulContext.Provider>\n\n\t\t\t<Footer />\n\t\t</>\n\t);\n};\n\nexport default App;\n","import React, { useContext } from 'react';\nimport NoteItem from './NoteItem';\n\nimport NotefulContext from './NotefulContext';\n\nconst Note = props => {\n\t// console.log('Note props = ', props);\n\t// console.log('Note history = ', props.history);\n\t// console.log('Note params = ', props.match.params);\n\t// console.log('Note note id = ', props.match.params.noteId);\n\n\tconst context = useContext(NotefulContext);\n\tconst { notes } = context;\n\n\t// QUESTION\n\t// reloading the browser wipes the context from memory\n\t// so need to handle if user reloads the browser and its undefined\n\t// done by adding || {} here AND : '' for props.modified in NoteItem too\n\tconst note = notes.find(note => note.id === props.match.params.noteId) || {};\n\n\treturn (\n\t\t<article>\n\t\t\t<div className=\"note\">\n\t\t\t\t<NoteItem {...props} note={note} />\n\t\t\t\t<p className=\"note-content\">{note.content}</p>\n\t\t\t</div>\n\t\t</article>\n\t);\n};\n\nexport default Note;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\n\nimport App from './App';\n\nReactDOM.render(\n\t<BrowserRouter basename={process.env.PUBLIC_URL}>\n\t\t<App />\n\t</BrowserRouter>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}